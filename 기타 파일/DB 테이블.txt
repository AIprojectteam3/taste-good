테이블 생성 명령어

=====================- 유저 -=====================
CREATE TABLE users (
    id INT NOT NULL AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    sns_id VARCHAR(255) NULL,
    provider VARCHAR(20) NOT NULL DEFAULT 'local', -- 가입 방식(local, kakao, naver) 구분
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    address VARCHAR(255) NULL,
    detail_address VARCHAR(255) NULL,
    profile_image_path VARCHAR(255) NULL,
    profile_intro TEXT NULL,
    PRIMARY KEY (id),
    UNIQUE KEY uk_email (email)
);

=====================- 게시물 -=====================
CREATE TABLE posts (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    views INT NULL DEFAULT 0,
    likes INT NULL DEFAULT 0,
    PRIMARY KEY (id),
    KEY idx_user_id (user_id),
    CONSTRAINT fk_posts_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id)
);

=====================- 댓글 -=====================
CREATE TABLE comments (
    id INT NOT NULL AUTO_INCREMENT,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    comment TEXT NOT NULL,
    created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    KEY idx_post_id (post_id),
    KEY idx_user_id (user_id),
    CONSTRAINT fk_comments_post_id 
        FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    CONSTRAINT fk_comments_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id)
);

=====================- 게시물 이미지 -=====================
CREATE TABLE files (
    id INT NOT NULL AUTO_INCREMENT,
    post_id INT NOT NULL,
    file_name VARCHAR(100) NOT NULL,
    file_path VARCHAR(200) NOT NULL,
    file_type VARCHAR(50) NOT NULL,
    PRIMARY KEY (id),
    KEY idx_post_id (post_id),
    CONSTRAINT fk_files_post_id 
        FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
);

=====================- 좋아요 -=====================
CREATE TABLE post_likes (
    id INT NOT NULL AUTO_INCREMENT,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    liked_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    KEY idx_post_id (post_id),
    KEY idx_user_id (user_id),
    UNIQUE KEY uk_post_user (post_id, user_id),
    CONSTRAINT fk_post_likes_post_id 
        FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    CONSTRAINT fk_post_likes_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id)
);

=====================- 조회수 -=====================
CREATE TABLE post_views (
    id INT NOT NULL AUTO_INCREMENT,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    viewed_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    KEY idx_post_id (post_id),
    KEY idx_user_id (user_id),
    CONSTRAINT fk_post_views_post_id 
        FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    CONSTRAINT fk_post_views_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id)
);

=====================- 검색기록 -=====================
CREATE TABLE search_logs (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NULL,
    search_term VARCHAR(255) NOT NULL,
    search_type VARCHAR(50) NULL DEFAULT 'all',
    result_count INT NULL DEFAULT 0,
    created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    KEY idx_user_id (user_id),
    KEY idx_search_term (search_term(250)),
    KEY idx_created_at (created_at),
    CONSTRAINT fk_search_logs_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id)
);

=====================- 유저 레벨 -=====================
CREATE TABLE user_levels (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NULL,
    level INT NULL DEFAULT 1,
    PRIMARY KEY (id),
    KEY idx_user_id (user_id),
    UNIQUE KEY uk_user_level (user_id),
    CONSTRAINT fk_user_levels_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

=====================- 유저 포인트 -=====================
CREATE TABLE user_points (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NULL,
    point INT NULL DEFAULT 0,
    PRIMARY KEY (id),
    KEY idx_user_id (user_id),
    UNIQUE KEY uk_user_point (user_id),
    CONSTRAINT fk_user_points_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

=====================- 유저 로그인 기록 -=====================
CREATE TABLE user_logins (
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    ip_address VARCHAR(45) NOT NULL,
    login_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    device_info VARCHAR(255) NULL,
    login_status ENUM('success','failure') NULL DEFAULT 'success',
    PRIMARY KEY (id),
    KEY idx_user_id (user_id),
    KEY idx_login_time (login_time),
    CONSTRAINT fk_user_logins_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id)
);

================================================================
=====================- 알레르기 관련 테이블 -=====================
================================================================

=====================- 알레르기 마스터 테이블 -=====================
CREATE TABLE allergen (
    id        INT AUTO_INCREMENT PRIMARY KEY,
    code      VARCHAR(30)  NOT NULL,          -- ‘egg’, ‘milk’ …
    name_ko   VARCHAR(50)  NOT NULL,          -- 계란, 우유 …
    UNIQUE KEY uk_allergen_code (code)
);

=====================- 알레르기 마스터 테이블 데이터 삽입 -=====================
INSERT INTO allergen (code, name_ko) VALUES
 ('egg',          '알류'),
 ('milk',         '우유'),
 ('wheat',        '밀'),
 ('buckwheat',    '메밀'),
 ('soy',          '대두'),
 ('peanut',       '땅콩'),
 ('walnut',       '호두'),
 ('pine_nut',     '잣'),
 ('peach',        '복숭아'),
 ('tomato',       '토마토'),
 ('chicken',      '닭고기'),
 ('pork',         '돼지고기'),
 ('beef',         '쇠고기'),
 ('mackerel',     '고등어'),
 ('crab',         '게'),
 ('shrimp',       '새우'),
 ('squid',        '오징어'),
 ('shellfish',    '조개류'),
 ('sulfite',      '아황산류');

=====================- 메뉴 테이블 -=====================
 CREATE TABLE menu (
    id           INT AUTO_INCREMENT PRIMARY KEY,
    name         VARCHAR(100) NOT NULL,
    description  TEXT,
    price        DECIMAL(10,2) NOT NULL,
    image_path   VARCHAR(255),
    calories     INT,
    created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                     ON UPDATE CURRENT_TIMESTAMP
);

=====================- 메뉴 <-> 알레르기 연결 테이블 -=====================
CREATE TABLE menu_allergen (
    menu_id      INT NOT NULL,
    allergen_id  INT NOT NULL,
    PRIMARY KEY (menu_id, allergen_id),
    CONSTRAINT fk_menu_allergen_menu
        FOREIGN KEY (menu_id)
        REFERENCES menu(id) ON DELETE CASCADE,
    CONSTRAINT fk_menu_allergen_allergen
        FOREIGN KEY (allergen_id)
        REFERENCES allergen(id) ON DELETE CASCADE
);

=====================- 유저 <-> 알레르기 연결 테이블 -=====================
CREATE TABLE user_allergen (
    user_id      INT NOT NULL,
    allergen_id  INT NOT NULL,
    PRIMARY KEY (user_id, allergen_id),
    CONSTRAINT fk_user_allergen_user
        FOREIGN KEY (user_id)
        REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_user_allergen_allergen
        FOREIGN KEY (allergen_id)
        REFERENCES allergen(id) ON DELETE CASCADE
);
=========================================================================================
=========================================================================================
=========================================================================================

트리거 생성 명령어

!! 주의사항
DELIMITER $$ 입력 후
내용 입력 후
DELIMITER ; 입력

=====================- 유저 가입 시 알레르기 기본 값 자동 입력 -=====================
DELIMITER $$
CREATE TRIGGER after_user_insert_allergies
AFTER INSERT ON users
FOR EACH ROW
BEGIN
    INSERT INTO user_allergies (user_id)
    VALUES (NEW.id);
END$$
DELIMITER ;

=====================- 유저 가입 시 레벨 기본 값 자동 입력 -=====================
DELIMITER $$
CREATE TRIGGER after_user_insert_levels
AFTER INSERT ON users
FOR EACH ROW
BEGIN
    INSERT INTO user_levels (user_id)
    VALUES (NEW.id);
END$$
DELIMITER ;

=====================- 유저 가입 시 포인트 기본 값 자동 입력 -=====================
DELIMITER $$
CREATE TRIGGER after_user_insert_points
AFTER INSERT ON users
FOR EACH ROW
BEGIN
    INSERT INTO user_points (user_id)
    VALUES (NEW.id);
END$$
DELIMITER ;